---
description:
globs:
alwaysApply: false
---
# Hooks Guide: Jupiter Mail

This document outlines the custom hooks used in Jupiter Mail, providing guidance on their purpose and usage.

## Utility Hooks

- [use-mobile.ts](mdc:hooks/use-mobile.ts): Hook for detecting mobile devices and responsive behavior

## Common Patterns

Jupiter Mail uses a combination of custom hooks and hooks from various libraries:

1. **React Hooks:**
   - `useState` for local component state
   - `useEffect` for side effects (data fetching, subscriptions)
   - `useCallback` for memoized callback functions
   - `useRef` for mutable references
   - `useMemo` for expensive computations

2. **React Hook Form:**
   - `useForm` for form state management and validation with Zod schemas
   - `useController` for controlled form inputs

3. **Redux Toolkit:**
   - `useAppDispatch` and `useAppSelector` (likely custom hooks wrapping RTK hooks)
   - RTK Query hooks for API calls (auto-generated from API slices)

## Best Practices

1. **Custom Hook Creation:**
   - Abstract complex logic into custom hooks for reusability
   - Follow the naming convention `use[Feature]` for all hooks
   - Keep hooks focused on a single responsibility

2. **Performance Considerations:**
   - Use memoization appropriately (`useCallback`, `useMemo`)
   - Avoid unnecessary re-renders with proper dependency arrays
   - For heavy computations, consider caching or memoization

3. **Cleanup:**
   - Ensure proper cleanup in `useEffect` return functions
   - Handle subscription and event listener cleanup
   - Avoid memory leaks from async operations

4. **Error Handling:**
   - Implement proper error states and error handling
   - Use try/catch blocks for async operations
   - Consider toast notifications for user-facing errors

5. **TypeScript Integration:**
   - Define precise types for hook parameters and return values
   - Use generic types where appropriate for flexibility
   - Leverage TypeScript's inference capabilities when possible
