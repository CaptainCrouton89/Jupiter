import { openai } from "@ai-sdk/openai";
import { generateObject } from "ai";
import { z } from "zod";
import {
  DigestEmailData,
  EmailSummaryItem,
  getDigestHtmlTemplate,
} from "./templates/digestTemplate";

// Structure for individual newsletter content (remains the same)
interface NewsletterContent {
  subject: string | null;
  from: string | null;
  content: string; // Prefer text, fallback to cleaned HTML
}

// Schema for summarizing a single email by gpt-4o-mini
const individualEmailSummarySchema = z.object({
  summaryBullets: z
    .array(z.string())
    .min(1)
    .max(5)
    .describe(
      "1-5 key bullet points summarizing this single email. Each bullet should be concise."
    ),
});
type IndividualEmailSummary = z.infer<typeof individualEmailSummarySchema>;

// Schema for the intro hook by gpt-4o-mini
const introHookSchema = z.object({
  hookParagraph: z
    .string()
    .describe(
      "A short, engaging introductory paragraph (2-3 sentences) that highlights the most interesting information or themes from the provided email summaries. Make it catchy!"
    ),
});

// Function to summarize a single email
async function summarizeSingleEmail(
  newsletter: NewsletterContent
): Promise<IndividualEmailSummary | null> {
  const prompt = `Summarize the following email content into 1-5 concise bullet points. Focus on the most important information.
  FROM: ${newsletter.from || "N/A"}
  SUBJECT: ${newsletter.subject || "N/A"}
  CONTENT:
  ${newsletter.content.substring(0, 3500)}  // Truncate for token limits
  `;
  try {
    const { object: summary } = await generateObject({
      model: openai("gpt-4.1-mini"),
      temperature: 0.1,
      schema: individualEmailSummarySchema,
      prompt,
      maxTokens: 250,
    });
    return summary;
  } catch (error) {
    console.error(
      `Error summarizing email "${newsletter.subject || "[No Subject]"}":`,
      error
    );
    return null; // Return null if summarization fails for this email
  }
}

// Function to generate the intro hook
async function generateIntroHook(
  emailSummariesForHook: Array<{ title: string; bullets: string[] }>
): Promise<string> {
  if (emailSummariesForHook.length === 0) {
    return "Here's your weekly roundup of newsletters."; // Default if no summaries
  }
  const highlights = emailSummariesForHook
    .map(
      (s) =>
        `Email: "${s.title}" highlights:\n${s.bullets
          .map((b) => `  - ${b}`)
          .join("\n")}`
    )
    .join("\n\n");

  const systemPrompt = `You are an assistant that writes a concise and engaging introductory paragraph (1-2 sentences, max 250 chars) for a weekly newsletter digest. This introduction should serve as a hook, briefly highlighting a key theme or the most notable piece of information from the provided email summaries. Avoid overly sensational language, and do not editorialize. Focus on being informative.`;
  const userPrompt = `Based on these email summaries, write a hook paragraph:\n\n  ${highlights.substring(
    0,
    3500
  )}  // Truncate for token limits
  `;

  try {
    const { object: intro } = await generateObject({
      model: openai("gpt-4.1-mini"),
      temperature: 0.1,
      schema: introHookSchema,
      system: systemPrompt,
      prompt: userPrompt,
      maxTokens: 150,
    });
    return intro.hookParagraph;
  } catch (error) {
    console.error("Error generating intro hook:", error);
    return "Welcome to your weekly newsletter digest! Here's what's new:"; // Fallback intro
  }
}

/**
 * Generates a weekly newsletter digest HTML from a list of newsletters.
 * Each email is summarized individually by gpt-4o-mini in parallel.
 * An intro hook is also generated by gpt-4o-mini.
 */
export async function generateDigestSummary(
  newsletters: NewsletterContent[],
  userName?: string
): Promise<string> {
  const overallTitle = "Your Weekly Newsletter Digest"; // Can be dynamic later if needed

  if (!newsletters || newsletters.length === 0) {
    // Handle case with no newsletters
    const noNewsData: DigestEmailData = {
      overallTitle,
      hookIntro: "No new newsletters to summarize this week! Enjoy the peace.",
      emailSummaries: [],
      userName,
    };
    return getDigestHtmlTemplate(noNewsData);
  }

  // 1. Summarize all emails in parallel
  const summaryPromises = newsletters.map((email) =>
    summarizeSingleEmail(email)
  );
  const settledSummaries = await Promise.allSettled(summaryPromises);

  const successfulEmailSummaries: EmailSummaryItem[] = [];
  settledSummaries.forEach((result, index) => {
    if (result.status === "fulfilled" && result.value) {
      successfulEmailSummaries.push({
        emailTitle: newsletters[index].subject || "Untitled Email",
        source: newsletters[index].from || "Unknown Sender",
        bulletPoints: result.value.summaryBullets,
      });
    }
  });

  if (successfulEmailSummaries.length === 0) {
    const noSummariesData: DigestEmailData = {
      overallTitle,
      hookIntro:
        "We tried to summarize your newsletters, but it seems there was an issue. We'll try again next week!",
      emailSummaries: [],
      userName,
    };
    return getDigestHtmlTemplate(noSummariesData);
  }

  // 2. Generate intro hook based on successful summaries
  const introHook = await generateIntroHook(
    successfulEmailSummaries.map((s) => ({
      title: s.emailTitle,
      bullets: s.bulletPoints,
    }))
  );

  // 3. Prepare data for HTML template
  const digestEmailData: DigestEmailData = {
    overallTitle: overallTitle,
    hookIntro: introHook,
    emailSummaries: successfulEmailSummaries,
    userName: userName,
  };

  // 4. Generate HTML
  return getDigestHtmlTemplate(digestEmailData);
}
